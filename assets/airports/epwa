{
  "name": "Warsaw Chopin Airport",
  "level": "medium",
  "radio": {
    "twr": "okecie tower",
    "app": "warsaw aproach",
    "dep": "warsaw aproach"
  },
  "icao": "EPWA",             // uppercase ICAO airport code
  "iata": "WAW",              // uppercase IATA airport code
  "magnetic_north": 13.7,     // magnetic declination, in degrees EAST!
  "ctr_radius": 80,           // radius from 'position' that the airspace extends
  "ctr_ceiling": 10000,       // elevation up to which the airspace extends
  "initial_alt": 5000         // alt departures climb to if given "as-filed" clearance, but no "climb-via-sid" or altitude assignment
  "position", ["N52d09m57", "E20d58m02"]  // the latitude/longitude of the "center" of the airport; see comments below
  "rr_radius_nm": 5,          // radius of range rings, nautical miles
  "rr_center": ["N52d09m57", "E20d58m02"],// position where range rings are centered, nautical miles
  "has_terrain": false,        // true/false for if has an associated GeoJSON terrain file in assets/airports/terrain
  "wind": {     // wind is used for score, and can affect aircraft's ground tracks if enabled in settings
    "angle": 0, // the heading, in degrees, that the wind is coming from
    "speed": 3  // the speed, in knots, of the wind
  },
  "fixes": {
    "FIXNAME", ["lat", "lon"] // the position, in GPS coordinates, of the fix
  },
  "runways": [
    {
      "name":        ["36", "18"],     // the name of each end of the runway
      "name_offset": [[0, 0], [0, 0]], // the offset, in km, of the runway text when drawn on the map
      "end":         [                 // the ends of the runway
                       ["lat", "lon"],
                       ["lat", "lon"]
                     ],
      "delay":       [2, 2],           // the number of seconds it takes to taxi to the end of the runway
      "sepFromAdjacent": [2.5, 2.5],   // Distance in nautical miles that another aircraft can come while on parallel approach paths, a violation will occur at 85% of this value
      "ils":         [true, false]     // not used yet; indicates whether or not that end of the runway has ILS
    }
  ],
  "sids": {   // contains all SIDs available at this airport
    "OFFSH9": { // (req) must match ICAO identifier
      "icao": "OFFSH9",           // (req) ICAO identifier for SID (this is NOT the full name, always 2-6 characters)
      "name": "Offshore Nine" ,   // (req) Name of SID as it would be said aloud (it is used by speech synthesis to pronounce "OFFSH9")
      "suffix": {"1L":"", "1R":"", "28L":"", "28R":""},   // (optional) defines suffixes to SID name based on runway (eg '2C' for 'EKERN 2C').
                                                          // Common for European-style SIDs. If not needed (like in USA), leave this part out.
      "rwy": {  // (req) ALL runways usable on this SID must be listed below. If a runway isn't listed, aircraft departing
                // that runway will need to be re-assigned a different SID or runway (this is realistic and intended).
          "1L" : [["SEPDY", "A19+"], "ZUPAX"],  // Each runway for which this SID is valid must be listed here. The value assigned to each runway is an array 
          "1R" : [["SEPDY", "A19+"], "ZUPAX"],  // of fixes, entered as strings. As shown, you may also enter an array containing the fix name and restrictions
          "28L": [["SENZY", "A25+"], "ZUPAX"],  // at that fix, separated by a pipe symbol ('|'). For example, see the following: ["FIXNAME", "A50-|S220+"]. In 
          "28R": [["SENZY", "A25+"], "ZUPAX"]   // that example, restrictions of Altitude 5,000' or lower, and Speed 220kts or higher would be placed on that fix.
        },
      "body": ["EUGEN", "SHOEY"],   // (optional) If there is a very long series of fixes in a SID, it may be 
                                    // helpful to put some of it here, while all segments follow the same path.
      "transitions": {    // (optional) Defines transitions for a given SID. Common for FAA-style (USA) SIDs. If not needed (like in Europe), leave this part out.
          "SNS": ["SNS"], // defines the "OFFSH9.SNS" transition as being a single fix, "SNS". Is often a list instead.
          "BSR": ["BSR"]  // Note that this connects to the end of previous sections, so an example route: SEPDY->ZUPAX->EUGEN->SHOEY->BSR
      },
      "draw": [["SEPDY","ZUPAX"], ["SENZY","ZUPAX","EUGEN","SHOEY*"], ["SHOEY","SNS*"], ["SHOEY","BSR*"]]
        // (req) This "draw" section is what defines how the SID is to be drawn on the scope in blue.
        // The array contains multiple arrays that are a series of points to draw fixes between.
        // In this case, SEPDY->ZUPAX, SENZY->ZUPAX->EUGEN->SHOEY, SHOEY->SNS, SHOEY->BSR are the lines drawn.
        // Additionally, you'll notice three asterisks ('*'). This is an optional flag that, if invoked for "FIXXX"
        // will tell canvas.js to write "OFFSH9.FIXXX" next to FIXXX on the scope. If no such flags are present,
        // then the ICAO identifier for the SID will be drawn at the last point of the "draw" array. For european-
        // style SIDs, where they always end at the fix for which the SID is named, don't use the flags. But if your SID
        // has transitions, like in the N/S Americas, United Kingdom, etc, be sure to flag all the transition fixes.
    }
  },
  "stars": {  // contains all STARS available at this airport
    "PYE1" : {
      "icao": "PYE1",               // (req) ICAO identifier for SID (this is NOT the full name, always 2-6 characters)
      "name": "Point Reyes One" ,   // (req) Name of SID as it would be said aloud (it is used by speech synthesis to pronounce "OFFSH9")
      "suffix": {"1L":"", "1R":"", "28L":"", "28R":""},   // (optional) defines suffixes to STAR name based on runway (eg '7W' for 'MIKOV 7W').
                                                          // Common for European-style STARs. If not needed (like in USA), leave this part out.
      "transitions": {    // (optional) Defines transitions for a given SID. Common for FAA-style (USA) SIDs. If not needed (like in Europe), leave this part out.
          "ENI": ["ENI"], // defines the "OFFSH9.SNS" transition as being a single fix, "SNS". Is often a list instead.
          "MXW": ["MXW"]  // Note that this connects to the end of previous sections, so an example route: SEPDY->ZUPAX->EUGEN->SHOEY->BSR
      },
      "body": ["PYE", ["STINS", "A230|S250"], "HADLY"], // (optional) This is where you store the waypoints when all segments are along the same path
      "rwy": {  // (optional) For runway-transitions (eg "descending via HAWKZ4, landing north")
          "1L" : [["SEPDY", "A19+"], "ZUPAX"],  // List fixes here that are specific to a particular runway configuration.
          "1R" : [["SEPDY", "A19+"], "ZUPAX"],  // In Europe, these are called the "transitions" that come after the STAR.
          "28L": [["SENZY", "A25+"], "ZUPAX"],  // If any runways are listed, all must be listed.
          "28R": [["SENZY", "A25+"], "ZUPAX"]
      },
      "draw": [["ENI*","PYE"], ["MXW*","PYE"], ["PYE","STINS","HADLY","OSI"]]
        // (req) This "draw" section is what defines how the SID is to be drawn on the scope.
        // The array contains multiple arrays that are a series of points to draw fixes between.
        // In this case, ENI->PYE, MXW->PYE, PYE->STINS->HADLY->OSI are the lines drawn.
        // Additionally, you'll notice two asterisks ('*'). This is an optional flag that, if invoked for "FIXXX"
        // will tell canvas.js to write "FIXXX.PYE1" next to FIXXX on the scope. If no such flags are present,
        // then the ICAO identifier for the SID will be drawn at the first point of the "draw" array. For european-
        // style STARs, where they always end at the fix for which the STAR is named, don't use the flags.
    }
  },
  "departures": {
    "airlines": [
      ["three-letter ICAO airline code/fleet", 0], // see "Aircraft/Airline selectors" below
      ...
    ],
    "destinations": [
      "LISST", "OF", "SIDS", "ACRFT", "WILLL", "FLYYY", "TO"  // these must each be a defined SID above
    ],
    "type": ,
    "offset": ,
    "frequency": [3, 4] // the frequency, in minutes, of a new departing aircraft. A random number is chosen between the two.
  },
  "arrivals": [
    {   // Basic 1
      "type": "random",
      "radial": 170,        // the direction, in degrees, of arriving aircraft when they spawn; these will come from the south. ONLY use 'radial' with heading-based arrivals.
      "heading": 350,       // the direction airplanes will be pointing when they spawn; will be opposite of "radial" if omitted
      "frequency": 10,
      "altitude": 10000,
      "speed": 250,
      "airlines": [ ... ]
    },
    {   // Basic 2
      "type": "random",
      "fixes": ["MOVDD", "RISTI", "CEDES"],   // list of fixes to fly to after spawning.
      "frequency": 10,
      "altitude": 10000,
      "speed": 250,
      "airlines": [ ... ]
    },
    {   // Advanced, based on a route of flight (like a STAR, for example)
      "type": "random",               // options include 'random', 'cyclic', 'wave', and 'surge' (see below for descriptions)
      "route":   "QUINN.BDEGA2.KSFO", // route to follow (spawn at first point)
      "frequency": 10,              // spawn rate of this stream, in acph
      "altitude":  [20000, 24000],  // altitude to spawn at (either a value, or altitude range via array)
      "speed":    280,              // speed to spawn at
      "airlines": [ ... ]           // same as in "departures"
    },
    ...
  ]
}
